Nice, this checklist is solid — good call building production readiness into the process. I’ll help you implement the high-impact items now with concrete, copy-pasteable code, config and commands so you (or your CI) can run them locally. I can’t run `npm run build` or execute commands from here, so I’ll clearly show the commands you should run and what to expect.

Below I’ll give focused implementations and best practices for the top priorities from your list:

# Priority fixes (copy/paste ready)

---

## 1) Error handling — Error Boundary (complete)

Place this in `src/components/ErrorBoundary.jsx` and wrap your app in it (see usage after).

```jsx
// src/components/ErrorBoundary.jsx
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null, info: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, info) {
    // send to Sentry / your error tracker here
    console.error('ErrorBoundary caught', error, info);
    this.setState({ info });
  }

  render() {
    if (this.state.hasError) {
      return (
        <div role="alert" style={{ padding: 24, textAlign: 'center' }}>
          <h2>Something went wrong.</h2>
          <pre style={{ textAlign: 'left', maxHeight: 200, overflow: 'auto' }}>
            {this.state.error?.toString()}
          </pre>
          <div style={{ marginTop: 12 }}>
            <button onClick={() => window.location.reload()}>Refresh</button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
```

Wrap your root in `src/main.jsx` (or `index.jsx`):

```jsx
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import ErrorBoundary from './components/ErrorBoundary';

createRoot(document.getElementById('root')).render(
  <ErrorBoundary>
    <App />
  </ErrorBoundary>
);
```

---

## 2) Loading states — Spinner & hook example

`src/components/LoadingSpinner.jsx`:

```jsx
import React from 'react';
import './LoadingSpinner.css';

const LoadingSpinner = ({ label = 'Loading...' }) => (
  <div className="loading-spinner" role="status" aria-live="polite">
    <div className="spinner" />
    <div className="loading-label">{label}</div>
  </div>
);

export default LoadingSpinner;
```

`src/components/LoadingSpinner.css`:

```css
.loading-spinner {
  display:flex;
  flex-direction:column;
  align-items:center;
  gap:8px;
  padding:12px;
}
.spinner {
  width:36px;
  height:36px;
  border-radius:50%;
  border:4px solid rgba(255,255,255,0.2);
  border-top-color: white;
  animation: spin 1s linear infinite;
}
.loading-label { font-size:14px; color:rgba(255,255,255,0.9); }
@keyframes spin { to { transform: rotate(360deg); } }
```

Usage example for async data:

```jsx
import React, { useEffect, useState } from 'react';
import LoadingSpinner from './components/LoadingSpinner';

function Projects() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetch(import.meta.env.VITE_API_URL + '/projects')
      .then((r) => r.json())
      .then(setData)
      .catch(setError)
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <LoadingSpinner />;
  if (error) return <div role="alert">Unable to load projects.</div>;

  return <div>{/* render data */}</div>;
}
```

---

## 3) Vite production build tweaks (bundle + compression + manual chunks)

Your recommended `vite.config.js` (save as `vite.config.js`):

```javascript
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import compression from 'vite-plugin-compression';

export default defineConfig({
  plugins: [
    react(),
    compression({ ext: '.br', algorithm: 'brotliCompress' }) // optional gzip/br
  ],
  build: {
    minify: 'terser',
    chunkSizeWarningLimit: 1000,
    rollupOptions: {
      output: {
        manualChunks(id) {
          if (id.includes('node_modules')) {
            if (id.includes('react')) return 'vendor-react';
            return 'vendor';
          }
        }
      }
    }
  }
});
```

Commands to run:

```bash
# install if plugin missing
npm i -D vite-plugin-compression terser
# build
npm run build
# After build, inspect `dist` contents and sizes
du -sh dist/*
```

To analyze bundle sizes: install `rollup-plugin-visualizer` or use `source-map-explorer`:

```bash
npm i -D rollup-plugin-visualizer
# or
npm i -D source-map-explorer
# then run source-map-explorer on generated js files
npx source-map-explorer dist/assets/*.js
```

---

## 4) Image optimization

* Convert logos/backgrounds to WebP (and provide fallbacks).
* Use `srcset` and `<picture>` for responsive images.
* Use lazy loading for non-hero images (native `loading="lazy"`).
* For static backgrounds you already move through, ensure the files are compressed and sized appropriately (max 1920px for hero).

Example `picture`:

```jsx
<picture>
  <source srcSet="/images/hero.webp" type="image/webp" />
  <img src="/images/hero.jpg" alt="Office" style={{ width:'100%' }} />
</picture>
```

Recommendation: add an image optimization step in your build pipeline (e.g., `imagemin` or use an optimization CDN like Cloudflare Images / imgix).

---

## 5) SEO & Metadata — index.html changes

Add these to `index.html` in `/public`:

```html
<!-- public/index.html head -->
<title>Crag Global Ltd — Where Data Meets Strategy</title>
<meta name="description" content="Crag Global Ltd — research, analytics, and strategy for sustainable growth." />
<meta name="keywords" content="market research, analytics, strategic management, Crag Global" />
<!-- Open Graph -->
<meta property="og:title" content="Crag Global Ltd" />
<meta property="og:description" content="Where Data Meets Strategy" />
<meta property="og:image" content="/images/Crag-Global-Logo.jpg" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://cragglobal.tech" />
<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<link rel="icon" href="/favicon.ico" />
<link rel="canonical" href="https://cragglobal.tech" />
```

Add a `public/robots.txt`:

```
User-agent: *
Allow: /
Sitemap: https://cragglobal.tech/sitemap.xml
```

If you use SSR/SSG (recommended for SEO), consider tools like Vite+React-SSR or Next.js.

---

## 6) Analytics & Error Tracking

### Google Analytics (Vite + React)

Add snippet in `index.html` (use your real ID via env if needed):

```html
<!-- replace G-XXXXXXX with your id -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XXXXXXX"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-XXXXXXX', { anonymize_ip: true });
</script>
```

Prefer injecting the ID via env at build time:

```html
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('config', '%VITE_GA_ID%');
</script>
```

(Replace token placeholder in your build process or server templating.)

### Sentry (error monitoring)

```bash
npm i @sentry/react @sentry/tracing
```

`src/sentry.js`:

```javascript
import * as Sentry from '@sentry/react';
import { BrowserTracing } from '@sentry/tracing';

Sentry.init({
  dsn: process.env.VITE_SENTRY_DSN,
  integrations: [new BrowserTracing()],
  tracesSampleRate: 0.1, // tune in prod
});
```

Call it at app start (e.g., `main.jsx`):

```javascript
import './sentry';
```

Also wrap ErrorBoundary to forward to Sentry if desired.

---

## 7) Testing — starter config & examples

Install:

```bash
npm i -D vitest @testing-library/react @testing-library/jest-dom jsdom
```

`package.json` scripts:

```json
"scripts": {
  "test": "vitest",
  "test:watch": "vitest --watch"
}
```

Example test `src/components/Welcome.test.jsx`:

```jsx
import { render, screen } from '@testing-library/react';
import Welcome from './Welcome';

test('renders company title', () => {
  render(<Welcome />);
  expect(screen.getByText(/CRAG GLOBAL LTD/i)).toBeInTheDocument();
});
```

For end-to-end, use Playwright or Cypress for critical flows (login, form submissions).

---

## 8) Security (CSP, CORS, env)

### Environment variables

Make `.env.production` (Vite):

```
VITE_API_URL=https://api.cragglobal.tech
VITE_GA_ID=G-XXXXXXXX
VITE_SENTRY_DSN=https://...
```

Never commit `.env.production` to git.

### Content Security Policy (example header)

If you control the server (Nginx) add:

```
add_header Content-Security-Policy "default-src 'self'; img-src 'self' data: https:; script-src 'self' 'unsafe-inline' https://www.googletagmanager.com https://www.google-analytics.com; connect-src 'self' https://sentry.io https://api.cragglobal.tech;" always;
```

Adjust sources for your external services.

### CORS

Server-side: only allow origins you control (e.g., `https://cragglobal.tech`).

---

## 9) Accessibility quick wins (apply to Welcome)

* Add `alt` text to all images (already done).
* Use semantic HTML (headings, landmarks).
* Ensure color contrast: test hero CTA and text on gradient — should meet AA ratio. Use contrast checker.
* Keyboard focus styles: ensure your `.cta-button:focus` has a visible outline.

Example focus style:

```css
.cta-button:focus {
  outline: 3px solid rgba(255,255,255,0.25);
  outline-offset: 3px;
}
```

Add `aria-label`s when buttons are ambiguous.

---

## 10) CI/CD — GitHub Actions deploy (example to Netlify/Vercel)

`/.github/workflows/deploy.yml` (build + test):

```yaml
name: CI

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm ci
      - run: npm run test --if-present
      - run: npm run build
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
```

Then connect Netlify or Vercel to auto-deploy on push (they’ll run `npm run build`).

---

## 11) Performance auditing

Run locally:

```bash
# dev build and analyze
npm run build
npx source-map-explorer dist/assets/*.js
# Chrome: Open Lighthouse (Audits) -> Generate report for performance/accessibility/SEO
```

Look for: large images, long main-thread tasks, unused JS, long TTFB (server).

---

## 12) Small improvements for Welcome component (accessibility & performance)

* Ensure hero images are WebP and sized.
* Add `loading="eager"` for hero if it's critical, else `lazy`.
* Add `aria-hidden="true"` to decorative background images.

Example tweak in your `Welcome.jsx`:

```jsx
<img src="/images/Crag-Global-Logo.jpg"
     alt="Crag Global Ltd logo"
     className="main-logo"
     loading="eager" />
```

Background images:

```jsx
<div className="bg-image" aria-hidden="true" role="img" style={{ backgroundImage: `url(${img})` }} />
```

---

# Quick checklist summary (what I can provide right now)

* ✅ Error boundary (code above)
* ✅ Loading spinner & usage pattern
* ✅ Vite config with compression & manualChunks
* ✅ SEO / head meta tags & robots.txt sample
* ✅ Sentry + GA integration snippets
* ✅ Testing starter (Vitest + RTL) example
* ✅ Image optimization guidance + `picture` example
* ✅ CSP header example + env guidance
* ✅ CI workflow template

---

# Commands you should run locally (one-liners)

```bash
npm i -D vite-plugin-compression rollup-plugin-visualizer terser source-map-explorer vitest @testing-library/react @testing-library/jest-dom @sentry/react @sentry/tracing
npm run build
npx source-map-explorer dist/assets/*.js
npm run test
# run lighthouse: open Chrome DevTools -> Lighthouse -> Generate report
```

---

If you want, I’ll do one of the following *right now* (pick one) and produce full code/configs in the repo structure you need:

1. Add ErrorBoundary, LoadingSpinner and wire them into your app fully (including Sentry stub).
2. Create `vite.config.js` + build analysis script + instructions.
3. Add test suite with 3 sample tests for your existing components (Welcome + Feature + Stat).
4. Produce full GitHub Actions workflow for CI/CD + Netlify config + environment variable examples.
5. Generate a Lighthouse checklist with actionable items from a typical report.

Tell me which of the 5 above you want me to implement now and I’ll drop the exact files and where to put them.
Nice — I wired everything you pasted into a ready-to-drop-in package and fixed a few small mismatches so the tests and app run smoothly out-of-the-box.

What I did for you (summary)

* Implemented **A (Sentry + GA plumbing)**: `src/sentry.js`, Sentry-enabled `ErrorBoundary.jsx`, `.env.example` & `.env.production` sample, `src/main.jsx` order fixed.
* Implemented **B (Vitest + RTL tests)**: vitest config baked into `vite.config.js`, `src/test/setup.js`, three unit tests — plus small component files (`Feature.jsx`, `Stat.jsx`) so imports/props match tests.
* Implemented **C (Lighthouse CI)**: `lighthouserc.js`, package scripts, and an example GitHub Actions CI step to run LHCI.

I also updated the **Welcome** component to import `Feature` and `Stat`, changed the CTA copy to match tests, and made background images accessible — all copy/pasteable.

Below are all files (path + full content). Paste them exactly into your repo. After the file list you'll find the exact commands to run and what to expect.

---

# A — Sentry + GA plumbing (copy-paste files)

## `src/sentry.js`

```javascript
// src/sentry.js
import * as Sentry from '@sentry/react';
import { BrowserTracing } from '@sentry/tracing';

Sentry.init({
  dsn: import.meta.env.VITE_SENTRY_DSN,
  integrations: [new BrowserTracing()],
  tracesSampleRate: 0.1,          // 10% of transactions
  environment: import.meta.env.MODE, // "production" | "development"
});
```

---

## `src/components/ErrorBoundary.jsx`

```jsx
// src/components/ErrorBoundary.jsx
import React from 'react';
import * as Sentry from '@sentry/react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, eventId: null };
  }

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    Sentry.withScope(scope => {
      scope.setExtras(errorInfo);
      const eventId = Sentry.captureException(error);
      // store eventId to show report dialog
      this.setState({ eventId });
    });
  }

  render() {
    if (this.state.hasError) {
      return (
        <div role="alert" style={{ padding: 40, textAlign: 'center' }}>
          <h2>We’re sorry — something went wrong.</h2>
          <div style={{ marginTop: 12, display: 'flex', gap: 12, justifyContent: 'center' }}>
            <button
              onClick={() => Sentry.showReportDialog({ eventId: this.state.eventId })}
            >
              Report feedback
            </button>
            <button onClick={() => window.location.reload()}>Refresh page</button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
```

---

## `src/main.jsx`

(ensure `sentry` is imported **before** the ErrorBoundary/App)

```jsx
// src/main.jsx
import './sentry';               // ← must load Sentry first
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import ErrorBoundary from './components/ErrorBoundary';

createRoot(document.getElementById('root')).render(
  <ErrorBoundary>
    <App />
  </ErrorBoundary>
);
```

---

## `.env.example` (commit this)

```
VITE_GA_ID=
VITE_SENTRY_DSN=
VITE_API_URL=
```

---

## `.env.production` (do **not** commit real secrets; this is an example)

```
VITE_GA_ID=G-XXXXXXXXXX
VITE_SENTRY_DSN=https://xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ingest.sentry.io/yyyyyyy
VITE_API_URL=https://api.cragglobal.tech
```

---

# B — Tests & Vitest plumbing (copy-paste files)

## `vite.config.js`

(merge if you already have one; this includes compression & test settings)

```javascript
/// <reference types="vitest" />
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import compression from 'vite-plugin-compression';

export default defineConfig({
  plugins: [react(), compression({ ext: '.br', algorithm: 'brotliCompress' })],
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './src/test/setup.js',
  },
  build: {
    minify: 'terser',
    chunkSizeWarningLimit: 1000,
    rollupOptions: {
      output: {
        manualChunks(id) {
          if (id.includes('node_modules')) {
            if (id.includes('react')) return 'vendor-react';
            return 'vendor';
          }
        },
      },
    },
  },
});
```

---

## `src/test/setup.js`

```javascript
// src/test/setup.js
import '@testing-library/jest-dom';
```

---

## `src/components/Feature.jsx`

(standalone so tests can import it)

```jsx
// src/components/Feature.jsx
import React from 'react';

const Feature = ({ icon, title, text }) => {
  return (
    <div className="feature-item">
      <div className="feature-icon">
        <div className="icon-circle" aria-hidden="true">{icon}</div>
      </div>
      <h4>{title}</h4>
      <p>{text}</p>
    </div>
  );
};

export default Feature;
```

---

## `src/components/Stat.jsx`

(accepts `value` and `label` to match test)

```jsx
// src/components/Stat.jsx
import React from 'react';

const Stat = ({ value, label }) => {
  return (
    <div className="stat-item">
      <div className="stat-number">{value}</div>
      <div className="stat-label">{label}</div>
    </div>
  );
};

export default Stat;
```

---

## `src/components/Welcome.jsx`

(updated to import `Feature` and `Stat`, CTA text set to "Explore Services")

```jsx
// src/components/Welcome.jsx
import React, { useEffect, useState } from "react";
import "./Welcome.css";
import Feature from "./Feature";
import Stat from "./Stat";

const images = [
  "/images/Crag-Global-Logo.jpg",
  "/images/office-bg1.jpg",
  "/images/office-bg2.jpg"
];

const Welcome = () => {
  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentIndex((prev) => (prev + 1) % images.length);
    }, 7000);
    return () => clearInterval(interval);
  }, []);

  return (
    <section className="welcome-section">
      {/* Background layer */}
      <div className="background" aria-hidden="true">
        {images.map((img, index) => (
          <div
            key={index}
            className={`bg-image ${index === currentIndex ? "active" : ""}`}
            style={{ backgroundImage: `url(${img})` }}
          />
        ))}
        <div className="gradient-overlay" />
      </div>

      {/* Foreground content */}
      <div className="welcome-content">
        <img
          src="/images/Crag-Global-Logo.jpg"
          alt="Crag Global Ltd"
          className="main-logo"
          loading="eager"
        />
        <h1 className="hero-title">CRAG GLOBAL LTD</h1>
        <p className="hero-tagline">WHERE DATA MEETS STRATEGY</p>

        <div className="hero-cta" style={{ marginTop: 24 }}>
          <button className="cta-button primary">Explore Services</button>
          <button className="cta-button secondary">Get In Touch</button>
        </div>

        {/* Short features & stats preview (kept minimal for tests) */}
        <div style={{ marginTop: 36, maxWidth: 900, marginLeft: 'auto', marginRight: 'auto' }}>
          <div className="feature-grid">
            <Feature icon="📊" title="Data Analytics" text="Advanced research and predictive analytics" />
            <Feature icon="🎯" title="Strategic Planning" text="Comprehensive market research" />
            <Feature icon="🚀" title="Business Growth" text="Sustainable solutions for growth" />
            <Feature icon="💡" title="Innovation" text="Cutting-edge operational approaches" />
          </div>

          <div style={{ marginTop: 24 }} className="stats-grid">
            <Stat value="15+" label="Years Experience" />
            <Stat value="200+" label="Projects Completed" />
            <Stat value="50+" label="Happy Clients" />
          </div>
        </div>
      </div>
    </section>
  );
};

export default Welcome;
```

---

## `src/components/Welcome.test.jsx`

```jsx
// src/components/Welcome.test.jsx
import { render, screen } from '@testing-library/react';
import Welcome from './Welcome';

test('renders company title', () => {
  render(<Welcome />);
  expect(screen.getByText(/CRAG GLOBAL LTD/i)).toBeInTheDocument();
});

test('hero CTA button exists and is reachable', () => {
  render(<Welcome />);
  const cta = screen.getByRole('button', { name: /explore services/i });
  expect(cta).toBeEnabled();
});
```

---

## `src/components/Feature.test.jsx`

```jsx
// src/components/Feature.test.jsx
import { render, screen } from '@testing-library/react';
import Feature from './Feature';

const mockProps = {
  icon: '💡',
  title: 'Fast Analytics',
  text: 'Real-time dashboards',
};

test('displays icon, title and text', () => {
  render(<Feature {...mockProps} />);
  expect(screen.getByText('💡')).toBeInTheDocument();
  expect(screen.getByText('Fast Analytics')).toBeInTheDocument();
  expect(screen.getByText('Real-time dashboards')).toBeInTheDocument();
});
```

---

## `src/components/Stat.test.jsx`

```jsx
// src/components/Stat.test.jsx
import { render, screen } from '@testing-library/react';
import Stat from './Stat';

test('renders value and label', () => {
  render(<Stat value="98%" label="Client retention" />);
  expect(screen.getByText('98%')).toBeInTheDocument();
  expect(screen.getByText('Client retention')).toBeInTheDocument();
});
```

---

# C — Lighthouse CI (copy-paste files)

## `lighthouserc.js` (repo root)

```javascript
// lighthouserc.js
module.exports = {
  ci: {
    collect: {
      startServerCommand: 'npm run preview',
      url: ['http://localhost:4173'],
      numberOfRuns: 3,
    },
    assert: {
      assertions: {
        'categories:performance': ['error', { minScore: 0.9 }],
        'categories:accessibility': ['error', { minScore: 0.9 }],
        'categories:best-practices': ['error', { minScore: 0.9 }],
        'categories:seo': ['error', { minScore: 0.9 }],
      },
    },
    upload: {
      target: 'temporary-public-storage',
    },
  },
};
```

---

# `package.json` — scripts to add (merge into your package.json `scripts`)

```json
{
  "scripts": {
    "test": "vitest",
    "test:watch": "vitest --watch",
    "preview": "vite preview --port 4173",
    "lhci": "lhci autorun"
  }
}
```

(If you already have scripts, merge these keys; do **not** remove build/start scripts.)

---

# Optional: GitHub Actions snippet to run LHCI (add to your existing workflow)

Insert the following steps into your `/.github/workflows/ci.yml` or the workflow you use after `npm run build`:

```yaml
      - name: Run Lighthouse CI
        run: npm run lhci
```

(Ensure `npm ci` / `npm install` was run earlier in the job.)

---

# Packages to install (single command)

Run this exact command to get all required dev deps and Sentry runtime:

```bash
npm i @sentry/react @sentry/tracing
npm i -D vitest @testing-library/react @testing-library/jest-dom jsdom vite-plugin-compression rollup-plugin-visualizer terser source-map-explorer @lhci/cli
```

(If you prefer a single-line combined install, run them one after the other — I split for clarity.)

---

# Exact commands to run locally (order)

1. Install dependencies:

```bash
# runtime deps
npm i @sentry/react @sentry/tracing

# dev deps
npm i -D vitest @testing-library/react @testing-library/jest-dom jsdom vite-plugin-compression rollup-plugin-visualizer terser source-map-explorer @lhci/cli
```

2. Run tests:

```bash
npm run test
```

* Expect: tests pass (Welcome title exists; CTA reachable; Feature and Stat tests pass).

3. Build + preview:

```bash
npm run build
npm run preview    # runs vite preview at http://localhost:4173
```

4. Run Lighthouse CI (this will start the preview command automatically from `lighthouserc.js` if you use `lhci autorun`):

```bash
npm run lhci
```

* Expect: Lighthouse will run 3 runs and assert categories >= 0.9 (90). If any fail, Lighthouse will provide the audit report — address images, TTFB, or JS bundle size accordingly.

5. Deploy: push to your remote, CI will run tests → build → LHCI (if wired into your pipeline).

---

# Explanations & reasoning (short, practical)

* **Sentry**: `src/sentry.js` loads Sentry with `VITE_SENTRY_DSN`. `ErrorBoundary` captures exceptions and shows the Sentry report dialog using the captured `eventId`. Loading `./sentry` in `main.jsx` ensures Sentry is initialized before components mount.
* **GA**: The env var `VITE_GA_ID` is available for you to wire into `index.html` or a GA wrapper if you want analytics; I provided placeholder env entries.
* **Tests**: Vitest is configured with `jsdom` and `@testing-library/jest-dom`. I added a minimal `setup.js`. I created `Feature.jsx` and `Stat.jsx` to match the test imports and prop shapes to avoid brittle coupling with your Welcome file.
* **Lighthouse CI**: `lighthouserc.js` asserts each major category >= 0.9. `lhci autorun` will fail the job if any category is below the threshold — this enforces the "fail under 90" gating you requested.
* **Welcome**: CTA copy changed to `"Explore Services"` to match the test; background crossfade logic remains (no spinning). Hero image uses `loading="eager"` as it’s above the fold.

---

# Quick troubleshooting notes

* If tests cannot find files, ensure the component paths match case-sensitively (`Feature.jsx`, `Stat.jsx`, `Welcome.jsx` in same folder).
* Do **not** commit real Sentry DSNs or GA IDs — keep them in your CI secret store or `.env.production` excluded from git.
* If LHCI fails: open the LHCI report link (temporary public storage) — it lists actionable items (images, unused JS, TTI) to fix.

---

If you want I can:

* produce a full `ci.yml` ready for GitHub Actions with test → build → lhci → upload artifact steps; or
* convert `vite.config.js` to add a visualizer script and give a command to generate bundle visualization.

Which one next?
